{"version":3,"sources":["actions/types.js","reducers/index.js","reducers/repoFetchData.js","reducers/simpleAuthButton.js","actions/index.js","components/TestList.js","App.js","serviceWorker.js","index.js","Root.js"],"names":["CHANGE_AUTH","FETCH_REPOS","combineReducers","repos","state","arguments","length","undefined","action","type","newdata","payload","data","map","html_url","concat","Object","toConsumableArray","apidata","auth","fetchRepos","response","axios","get","changeAuth","isLoggedIn","TestList","this","props","repo","react_default","a","createElement","key","className","onClick","renderRepos","Component","connect","actions","App","_this","react_router_dom","to","react_router","path","exact","component","renderHeader","Boolean","window","location","hostname","match","ReactDOM","render","_ref","children","_ref$initialState","initialState","store","createStore","reducers","applyMiddleware","reduxPromise","es","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d4f3f13.chunk.js","sourcesContent":["export const CHANGE_AUTH = 'change_auth';\nexport const FETCH_REPOS = 'fetch_repos';","import { combineReducers } from 'redux';\nimport authReducer from './simpleAuthButton';\nimport reposReducer from './repoFetchData';\n\nexport default combineReducers({\n  //- put reducer key: functioncalls here\n  repos: reposReducer,\n  auth: authReducer\n});\n","import { FETCH_REPOS } from '../actions/types';\n\nexport default function(state = [], action) {\n    switch (action.type) {\n        case 'test':\n            const newdata = action.payload.data.map(data => data.html_url);\n            return [...state, ...newdata];\n        case FETCH_REPOS:\n            //debugger;\n            // in console type \"action\" to inspect the action object\n            // then look at payload -> data to see the repos fetched from api\n            // if you remove reduxPromise from applyMiddleware (in Root.js)\n            // you will see the action payload is a pending Promise\n            const apidata = action.payload.data.map(data => data.html_url);\n            return [...state, ...apidata];\n        default:\n            return state;\n    }\n}\n","import { CHANGE_AUTH } from '../actions/types';\n\nexport default function (state = false, action) {\n    switch (action.type) {\n        case CHANGE_AUTH:\n            return action.payload;\n        default:\n            return state;\n    }\n};\n","import axios from 'axios';\nimport { CHANGE_AUTH, FETCH_REPOS } from './types';\n\nexport function fetchRepos() {\n    const response = axios.get('https://api.github.com/users/christrees/repos');\n    return {\n        type: FETCH_REPOS,\n        payload: response\n    };\n};\n\nexport function changeAuth(isLoggedIn) {\n    return {\n        type: CHANGE_AUTH,\n        payload: isLoggedIn\n    };\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions  from '../actions'; \n\n\nclass TestList extends Component {\n    renderRepos() {\n        return this.props.repos.map(repo => {\n            return <li key={repo}>{repo}</li>;\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <button className=\"fetch-repos\" onClick={this.props.fetchRepos}>Fetch christrees github repos</button>\n                <h4>Github Repo List - christrees</h4>\n                <ul>\n                    {this.renderRepos()}\n                </ul>\n            </div>\n        );\n    }\n};\n\nfunction mapStateToProps(state) {\n    return { repos: state.repos };\n}\n\nexport default connect(mapStateToProps, actions)(TestList);\n","import React, { Component } from 'react';\nimport { Route, Link /*, Redirect */ } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport TestList from './components/TestList';\nimport * as actions from './actions';\n\nclass App extends Component {\n    renderHeader() {\n        if (this.props.auth) {\n            return (\n                <div>v0.0.4\n                    <ul>\n                        <li><Link className=\"nav-list\" to=\"/list\">List</Link></li>\n                        <li><button className=\"sign-out\" onClick={() => this.props.changeAuth(false)}>Sign Out</button></li>\n                    </ul>\n                    <Route path=\"/list\" exact component={TestList} />\n                </div>\n            );\n        } else {\n            return (\n                <ul>\n                    <li><button className=\"sign-in\" onClick={() => this.props.changeAuth(true)}>Sign In</button></li>\n                </ul>\n            );\n        }\n    };\n    render() {\n        return (<div>{this.renderHeader()} </div>);\n    }\n};\n\nfunction mapStateToProps(state) {\n    return { auth: state.auth }\n};\n\nexport default connect(mapStateToProps, actions)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Root from './Root'; //new test setup\nimport App from './App';\n\n//- remove service worker to get it out of code coverage\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Root> \n        <BrowserRouter>\n            <Route path=\"/\" component={App} />\n        </BrowserRouter>\n    </Root>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxPromise from 'redux-promise';\nimport reducers from './reducers'; //Reminder: this imports reducers/index.js\n\nexport default ({ children, initialState={} }) => {\n    const store = createStore(\n        reducers,\n        initialState,\n        applyMiddleware(reduxPromise)\n    );\n    return (\n        <Provider store={store}>\n            {children}\n        </Provider>\n    );\n};\n"],"sourceRoot":""}